{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "8_1_notes/media/MediaMuxer/MediaMuxer_note.java",
			"settings":
			{
				"buffer_size": 8810,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "//\t@frameworks/av/media/libstagefright/include/media/stagefright/MediaMuxer.h\nclass MediaMuxer : public RefBase {}\n\n\n//\t@frameworks/av/media/libstagefright/MediaMuxer.cpp\nMediaMuxer::MediaMuxer(int fd, OutputFormat format)\n    : mFormat(format),\n      mState(UNINITIALIZED) {\n    if (format == OUTPUT_FORMAT_MPEG_4 || format == OUTPUT_FORMAT_THREE_GPP) {\n        mWriter = new MPEG4Writer(fd);\n    } else if (format == OUTPUT_FORMAT_WEBM) {\n        mWriter = new WebmWriter(fd);\n    }\n\n    if (mWriter != NULL) {\n        mFileMeta = new MetaData;\n        mState = INITIALIZED;\n    }\n}\n\n\n\nstatus_t MediaMuxer::start() {\n    Mutex::Autolock autoLock(mMuxerLock);\n    if (mState == INITIALIZED) {\n        mState = STARTED;\n        mFileMeta->setInt32(kKeyRealTimeRecording, false);\n        return mWriter->start(mFileMeta.get());\n    } else {\n        ALOGE(\"start() is called in invalid state %d\", mState);\n        return INVALID_OPERATION;\n    }\n}\n\nssize_t MediaMuxer::addTrack(const sp<AMessage> &format) {\n    Mutex::Autolock autoLock(mMuxerLock);\n\n    if (format.get() == NULL) {\n        ALOGE(\"addTrack() get a null format\");\n        return -EINVAL;\n    }\n\n    if (mState != INITIALIZED) {\n        ALOGE(\"addTrack() must be called after constructor and before start().\");\n        return INVALID_OPERATION;\n    }\n\n    sp<MetaData> trackMeta = new MetaData;\n    convertMessageToMetaData(format, trackMeta);//将format的信息恢复到MetaData结构中\n\n    sp<MediaAdapter> newTrack = new MediaAdapter(trackMeta);\n    status_t result = mWriter->addSource(newTrack);\n    if (result == OK) {\n    \t//\tVector< sp<MediaAdapter> > mTrackList;  // Each track has its MediaAdapter.\n        return mTrackList.add(newTrack);//注意返回给应用上层的为mTrackList索引\n    }\n    return -1;\n}\n\n\n\nstatus_t MediaMuxer::writeSampleData(const sp<ABuffer> &buffer, size_t trackIndex,int64_t timeUs, uint32_t flags) {\n    Mutex::Autolock autoLock(mMuxerLock);\n\n    if (buffer.get() == NULL) {\n        ALOGE(\"WriteSampleData() get an NULL buffer.\");\n        return -EINVAL;\n    }\n\n    if (mState != STARTED) {\n        ALOGE(\"WriteSampleData() is called in invalid state %d\", mState);\n        return INVALID_OPERATION;\n    }\n\n    if (trackIndex >= mTrackList.size()) {\n        ALOGE(\"WriteSampleData() get an invalid index %zu\", trackIndex);\n        return -EINVAL;\n    }\n\n    MediaBuffer* mediaBuffer = new MediaBuffer(buffer);\n\n    mediaBuffer->add_ref(); // Released in MediaAdapter::signalBufferReturned().\n    mediaBuffer->set_range(buffer->offset(), buffer->size());\nA\n    sp<MetaData> sampleMetaData = mediaBuffer->meta_data();\n    sampleMetaData->setInt64(kKeyTime, timeUs);\n    // Just set the kKeyDecodingTime as the presentation time for now.\n    sampleMetaData->setInt64(kKeyDecodingTime, timeUs);\n\n    if (flags & MediaCodec::BUFFER_FLAG_SYNCFRAME) {\n        sampleMetaData->setInt32(kKeyIsSyncFrame, true);\n    }\n\n    sp<MediaAdapter> currentTrack = mTrackList[trackIndex];//得到上一次通过 addTrack 创建的 MediaAdapter\n    // This pushBuffer will wait until the mediaBuffer is consumed.\n    return currentTrack->pushBuffer(mediaBuffer);\n}\n",
			"file": "8_1_notes/media/MediaMuxer/MediaMuxer_note.cpp",
			"file_size": 3151,
			"file_write_time": 131895948761665927,
			"settings":
			{
				"buffer_size": 3086,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "8_1_notes/media/MediaMuxer/MPEG4Writer/MPEG4Writer_note.cpp",
			"settings":
			{
				"buffer_size": 36559,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "8_1_notes/media/MediaMuxer/MediaAdapter_note.cpp",
			"settings":
			{
				"buffer_size": 1798,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "8_1_notes/media/audio/jni-audio/native-audio/tmp.cpp",
			"settings":
			{
				"buffer_size": 7206,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: List Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 136.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dc' + 'aeeebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)  ",
			"import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)  "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/xqli/work/notes",
		"/home/xqli/work/notes/8_1_notes",
		"/home/xqli/work/notes/8_1_notes/media",
		"/home/xqli/work/notes/8_1_notes/media/audio",
		"/home/xqli/work/notes/8_1_notes/media/audio/jni-audio",
		"/home/xqli/work/notes/8_1_notes/media/MediaPlayer"
	],
	"file_history":
	[
		"/home/xqli/work/notes/8_1_notes/media/audio/jni-audio",
		"/home/xqli/work/notes/8_1_notes/media/MediaMuxer/log.txt",
		"/home/xqli/work/workcodes/android-demos/my-ioc-apt-sample/settings.gradle",
		"/home/xqli/imx8-media-log",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/NuPlayer_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/Decoder/NuPlayerDecoder_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/Decoder/MediaCodec/MediaCodec_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/Decoder/MediaCodec/MediaCodecList_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/Decoder/MediaCodec/ACodec/ACodec_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/ResourceManagerService/ResourceManagerService_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/ResourceManagerService/ServiceLog_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/GenericSource/GenericSource_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaextractor/MediaExtractor/FslExtractor/FslExtractor_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaextractor/MediaExtractor/FslExtractor/FslMediaSource_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/Decoder/MediaCodec/MediaFilter/MediaFilter_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/ResourceManagerService/ServiceLog——",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/NuPlayerDecoder_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaextractor/MediaExtractor/MediaExtractor_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaextractor/DataSource/DataSource_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaextractor/DataSource/FileSource_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaextractor/MediaExtractorService_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/GenericSource/MediaExtractor_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/GenericSource/FileSource_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/GenericSource/DrmManagerClient_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/GenericSource/DrmManagerClientImpl_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/MediaPlayerService_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/NuPlayerDriver_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/Omx/OMXMaster/FSLOMXPlugin/FSLOMXPlugin_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/Omx/OMXMaster/FSLOMXPlugin/OMXCore/OMXCore_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/Omx/OMXMaster/FSLOMXPlugin/OMXCore/ShareLibarayMgr_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/Omx/OMXMaster/FSLOMXPlugin/PlatformResourceMgr/PlatformResourceMgr_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/NuPlayerRenderer_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/NuPlayerDriver/MediaAnalyticsItem_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaextractor/MediaExtractor/MPEG4Extractor/MPEG4Extractor_note.cpp",
		"/media/xqli/B4FE-5315/tombstone_00",
		"/work/workcodes/imx8-android-o/vendor/nxp/fsl_imx_omx/OpenMAXIL/src/component/vpu_wrapper/Android.mk",
		"/home/xqli/work/notes/8_1_notes/media/mediaextractor/DataSource_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/main_mediaserver_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaplayer/mediaserver/MediaPlayerService/MediaPlayerFactory_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/OmxStore/OmxStore_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/Omx/Omx_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/Omx/OMXMaster/SoftOMXPlugin_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/Omx/OMXMaster/OMXMaster_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/Omx/OMXMaster/QComOMXPlugin/QComOMXPlugin_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/OmxStore/MediaCodecsXmlParser_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/OmxStore/MediaCodecsXmlParser/MediaCodecsXmlParser_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/AudioRecord/AudioRecord_note.cpp",
		"/home/xqli/work/notes/8_1_notes/hwbinder/radio/rild/rild_note.c",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/Omx/OMXMaster_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/AudioTrack/AudioTrack_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/main_codecservice_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/OmxStore/MediaCodecsXmlParser/config-files/media_codecs_performance.xml",
		"/home/xqli/work/notes/8_1_notes/media/mediacodec/OmxStore/MediaCodecsXmlParser/config-files/media_codecs.xml",
		"/home/xqli/work/notes/8_1_notes/wifi/wificond/looper_backed_event_loop_note.cpp",
		"/home/xqli/work/notes/8_1_notes/wifi/wificond/main_note.cpp",
		"/home/xqli/work/workcodes/imx8-android-o/system/connectivity/wificond/main.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioFlinger/DevicesFactoryHalHidl_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioFlinger/DevicesFactoryHalHybrid_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioFlinger/DeviceHalHidl_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/android.hardware.audio@2.0-service/IDevicesFactory/PrimaryDevice_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/android.hardware.audio@2.0-service/IDevicesFactory/DevicesFactory_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioFlinger/AudioFlinger_note.cpp",
		"/home/xqli/work/workcodes/imx8-android-o/system/libhidl/transport/HidlTransportUtils.cpp",
		"/home/xqli/work/workcodes/imx8-android-o/system/libhidl/transport/include/hidl/HidlTransportSupport.h",
		"/home/xqli/work/notes/8_1_notes/media/audio/android.hardware.audio@2.0-service/passthrough_note.cpp",
		"/home/xqli/work/notes/8_1_notes/hwbinder/radio/rild/RadioImpl_note.cpp",
		"/home/xqli/work/notes/8_1_notes/hwbinder/radio/phone/RIL_note.java",
		"/home/xqli/work/notes/8_1_notes/hwbinder/radio/phone/IRadio_1_0_note.java",
		"/home/xqli/work/notes/8_1_notes/hwbinder/radio/phone/HwBinder_note.java",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/AudioPolicyManager/PolicySerializer_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/android.hardware.audio@2.0-service/IDevicesFactory/Device_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/AudioPolicyManager/AudioPolicyConfig_note.h",
		"/home/xqli/work/workcodes/imx8-android-o/system/media/audio/include/system/audio.h",
		"/home/xqli/work/workcodes/imx8-android-o/system/media/audio/include/system/audio-base.h",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/config-files/audio_policy_configuration.xml",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/config-files/usb_audio_policy_configuration.xml",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/config-files/a2dp_audio_policy_configuration.xml",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/AudioPolicyManager/AudioPolicyManager_note.cpp",
		"/home/xqli/work/workcodes/imx8-android-o/system/core/libcutils/include/cutils/bitops.h",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/config-files/audio_policy_volumes.xml",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/AudioPolicyManager/HwModule_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/config-files/default_volume_tables.xml",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/AudioPolicyEffects_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/mediaextractor/main_extractorservice_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AudioPolicyService/dumpsys-media.audio_policy.log",
		"/home/xqli/work/notes/8_1_notes/wifi/java-service/WifiService_note.java",
		"/home/xqli/work/notes/8_1_notes/wifi/java-service/RttService_note.java",
		"/home/xqli/work/notes/8_1_notes/wifi/java-service/WifiScanningService_note.java",
		"/home/xqli/work/notes/8_1_notes/wifi/java-service/WifiAwareService_note.java",
		"/home/xqli/work/notes/8_1_notes/vold/StorageManagerService/NativeDaemonConnector_note.java",
		"/home/xqli/work/notes/8_1_notes/vold/StorageManagerService/StorageManagerService_note.java",
		"/home/xqli/work/notes/8_1_notes/vold/sdcard/sdcard_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/AAudioService_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/AudioFlinger_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/AudioPolicyService_note.cpp",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/dumpsys-media.audio_policy.log",
		"/home/xqli/work/notes/8_1_notes/media/audio/audioserver/AAudioService/AAudioService_note.cpp",
		"/home/xqli/work/notes/8_1_notes/vold/vold.log",
		"/home/xqli/work/notes/8_1_notes/vold/vold-demon/CommandListener/CommandListener_note.cpp",
		"/home/xqli/work/notes/8_1_notes/vold/vold-demon/VolumeManager/VolumeManager_note.cpp",
		"/home/xqli/work/notes/8_1_notes/vold/vold-demon/VolumeManager/Disk_note.cpp",
		"/home/xqli/work/notes/8_1_notes/tools/strace/strace_note.c",
		"/home/xqli/work/notes/8_1_notes/tools/strace/strace_help.txt",
		"/home/xqli/work/notes/8_0_notes/app_process/Zygote/preload/Resources/AssetManager_note.java",
		"/home/xqli/work/notes/8_1_notes/vold/vold-demon/VolumeManager /Disk_note.cpp",
		"/home/xqli/.bashrc",
		"/home/xqli/work/notes/8_1_notes/media/audio/android.hardware.audio@2.0-service/service_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioFlinger/DevicesFactoryHalHybrid_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioFlinger/AudioFlinger_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AAudioService/AAudioService_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioFlinger/DevicesFactoryHalHidl_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioFlinger/DeviceHalHidl_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioFlinger/DevicesFactoryHalLocal_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/main_audioserver_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/SoundTriggerHwService/SoundTriggerHwService_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AAudioService/IAAudioService_note.h",
		"/home/xqli/Downloads/Huawei(1).log",
		"/home/xqli/.vimrc",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioPolicyService/AudioPolicyService_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioPolicyService/AudioPolicyManager/PolicySerializer_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioPolicyService/AudioPolicyService_note.h",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/dumpsys-media.audio_policy.log",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioFlinger/DeviceHalInterface_note.h",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioPolicyService/AudioPolicyManager/AudioPolicyConfig_note.h",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioPolicyService/AudioPolicyManager/HwModule_note.cpp",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioPolicyService/config-files/audio_policy_configuration.xml",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioPolicyService/config-files/a2dp_audio_policy_configuration.xml",
		"/home/xqli/work/notes/8_1_notes/audio/audioserver/AudioPolicyService/config-files/usb_audio_policy_configuration.xml"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"pEngine",
			"writeSampleData",
			"nativeWriteSampleData",
			"OMX_ErrorUndefined",
			"NuPlayer",
			"onConfigure",
			"bEnablePassThrough",
			"omxStore",
			"GetCodecBase",
			"onM",
			"kWhatInit",
			"instantiateDecoder",
			"onstart",
			"on",
			"initFromDataSource",
			"notifyPrepared",
			"checkDrmInfo",
			"getTra",
			"ParseFromParser",
			"mediaBuffers",
			"kWhatReadBuffer",
			"start",
			"instantiateDecoder",
			"start",
			"mFileMetaData",
			"  \n",
			"返回值长度",
			"lib_vpu_wrapper",
			"mVideoDecoder",
			"mStarted",
			"kWhatStart",
			"mLoop",
			"isCompatibleBrand",
			"MPEG2TSExtractor",
			"MPEG2PSExtractor",
			"mDataSource",
			"mUri",
			"mAntagonizer",
			"mDriver",
			"    //",
			"popcount",
			"AUDIO_DEVICE_BIT_IN",
			"audio_devices_t",
			"true",
			"GlobalConfigTraits",
			"storage",
			"655",
			"651",
			"CarLife",
			"close",
			"close vm area",
			"mouse",
			"DEFAULT_SYSTEM_VOLUME_CURVE",
			"image_instruction_set"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": false
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "8_1_notes/media/MediaMuxer/MediaMuxer_note.java",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8810,
						"regions":
						{
						},
						"selection":
						[
							[
								8526,
								8526
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/Java/Java.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2340.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "8_1_notes/media/MediaMuxer/MediaMuxer_note.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3086,
						"regions":
						{
						},
						"selection":
						[
							[
								3069,
								3069
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "8_1_notes/media/MediaMuxer/MPEG4Writer/MPEG4Writer_note.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36559,
						"regions":
						{
						},
						"selection":
						[
							[
								3988,
								3988
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1828.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "8_1_notes/media/MediaMuxer/MediaAdapter_note.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1798,
						"regions":
						{
						},
						"selection":
						[
							[
								1484,
								1484
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 273.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "8_1_notes/media/audio/jni-audio/native-audio/tmp.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7206,
						"regions":
						{
						},
						"selection":
						[
							[
								3592,
								3592
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "notes.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"RLD",
				"8_1_notes/hwbinder/radio/rild/rild_note.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 35.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 387.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
